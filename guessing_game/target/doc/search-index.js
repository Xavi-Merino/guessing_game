var searchIndex = JSON.parse('{\
"guessing_game":{"doc":"","t":"F","n":["main"],"q":[[0,"guessing_game"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"ran":{"doc":"Mean, lean, fast generation of random numbers of various …","t":"NNNNNNCCEEENNNNNNNNNLLLLLLALLLLLLALCLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLCACLLLLLLLLLLLLNNNNENNGNNLLLLLLFLLLLRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","n":["F64","F64","F64","I64","I64","I64","RanError","Re","Rnum","Rv","Rvv","U16","U16","U16","U64","U64","U64","U8","U8","U8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","error","fmt","fmt","fmt","from","from","from","generators","get_generic","get_seed","getf64","geti64","getu16","getu64","getu8","getv_generic","getvf64","getvi64","getvi64","getvu16","getvu64","getvu8","getvv_generic","getvvf64","getvvu16","getvvu64","getvvu8","impls","into","into","into","newf64","newi64","newu16","newu64","newu8","rannum","rannum_in","ranv","ranv_in","ranvv","ranvv_in","rerror","secondary","set_seeds","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Dimensions","Dimensions","Other","Other","RanError","Range","Range","Re","Type","Type","borrow","borrow_mut","fmt","fmt","from","into","rerror","to_string","try_from","try_into","type_id","MANTISSA_MAX","SEED","get_seed","get_xoshi","put_xoshi","ran_frange","ran_i64","ran_irange","ran_ubits","ran_urange","ranf64","ranvf64","ranvf64_xoshi","ranvi64","ranvi64_in","ranvu16","ranvu64","ranvu8","ranvvf64","ranvvf64_xoshi","ranvvi64","ranvvi64_in","ranvvu16","ranvvu64","ranvvu8","set_seeds","splitmix","xoshi_step","xoshif64","xoshiu64","stringv","stringvv"],"q":[[0,"ran"],[83,"ran::error"],[104,"ran::generators"],[134,"ran::secondary"],[136,"core::fmt"],[137,"core::fmt"],[138,"core::convert"],[139,"core::result"],[140,"alloc::vec"],[141,"alloc::string"],[142,"core::any"],[143,"core::fmt"]],"d":["f64 encapsulation","Vec encapsulation","Vec&lt;Vec&gt; encapsulation","i64 encapsulation","Vec encapsulation ","Vec&lt;Vec&gt; encapsulation","","","Wrapper for enum polymorphism - supported end types","Wrapper for enum polymorphism - vector","Wrapper for enum polymorphism - vector of vectors","u16 encapsulation ","Vec encapsulation ","Vec&lt;Vec&gt; encapsulation","d64 encapsulation ","Vec encapsulation ","Vec&lt;Vec&gt; encapsulation","u8 encapsulation ","Vec encapsulation ","Vec&lt;Vec&gt; encapsulation","","","","","","","Custom error RError","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The low level type specific generators","Extract a T value from an instance of Rnum type    ","","retrieve f64 from Rnum instance","retrieve i64 from Rnum instance    ","retrieve u16 from Rnum instance    ","retrieve u64 from Rnum instance","retrieve u8 from Rnum instance    ","Extract a vector of T values from an instance of Rv type   …","Extract a vector of f64 values from an instance of Rv type","Extract a vector of i64 value from an instance of Rv type  …","Extract Vec&lt;Vec&gt;    ","Extract a vector of u16 value from an instance of Rv type  …","Extract a vector of u64 value from an instance of Rv type","Extract a vector of u8 value from an instance of Rv type   …","Extract a vector of of vectors of T values from an …","Extract Vec&lt;Vec&gt;","Extract Vec&lt;Vec&gt;    ","Extract Vec&lt;Vec&gt;    ","Extract Vec&lt;Vec&gt;    ","Implementations of associated functions for the enum types ","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Receptacle for f64 random values","Receptacle for i64 random values ","Receptacle for u16 random values","Receptacle for u64 random values","Receptacle for u8 random values","generate a single random number of required type, in full …","generate a single random number of required type, in given …","generate a vector of random numbers of required type, in …","generate a vector of random numbers of required type, in …","generate a vector of n vectors (a matrix) of random …","generate a vector of n vectors (a matrix)  of random …","","Some helper functions","","","","","","","","","","","","","","Non-positive data dimensions","Non-positive data dimensions","Other error converted to RanError","Other error converted to RanError","Custom RStats Error","Min is not less than max","Min is not less than max","Shorthand type for returned errors with message payload …","Error indicating unexpected type of the wrapped random data","Error indicating unexpected type of the wrapped random data","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Convenience function for building <code>RanError&lt;String&gt;</code>  (ran …","","","","","Constant for converting u64 numbers to f64s in [0,1). It …","SEED is used by <code>ranf64</code> and/or <code>splitmix</code> algorithms. It is …","For saving the current value of seed, reproducing the same …","Load the xoshiro seeds into an array so as not to have to …","Put the xoshiro seeds back from a passed array","Transform an f64 number in [0,1) to the range […","i64 random number by simply casting from xoshiu64","Generate i64 random number in the interval [min:i64,max:i64…","Get random numbers of various smaller unsigned integer …","Generate u64 random number in the interval [min,max]. You …","Generate f64 random number in the standardised range [0,1).","Generates vector of size d, of f64 random numbers in [0,1).","Generates vector of size d, of f64 random numbers in [0,1).","Generates vector of size d, of i64 random numbers.","Generates vector of size d, of i64 random numbers in the …","Generates vector of size d, of u16 random numbers in […","Generates vector of size d, filled with full range u64 …","Generates vector of size d, of u8 random numbers in [0,255]…","Generates n vectors of size d each, of f64 random numbers …","Generates n vectors of size d each, of f64 random numbers …","Generates n vectors of size d each, of i64 random numbers …","Generates n vectors of size d each, of i64 random numbers …","Generates n vectors of size d each, of u16 random numbers …","Generates n vectors of size d each, of full range u64 …","Generates n vectors of size d each, of u8 random numbers …","Manual initialisation of SEED (and derived xoshi seeds).  …","Simple SPLITMIX64 fast generator recommended for …","Core part of the xoshi (xor shift) algorithms","Possibly the best f64 generator. Translated and modified …","Possibly the best full 64 bits generator. Adapted from …","stringifies a generic slice for printing","stringifies a generic slice of vectors for printing"],"i":[1,4,5,1,4,5,0,0,0,0,0,1,4,5,1,4,5,1,4,5,1,4,5,1,4,5,0,1,4,5,1,4,5,0,1,0,1,1,1,1,1,4,4,4,5,4,4,4,5,5,5,5,5,0,1,4,5,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,4,5,1,4,5,1,4,5,1,4,5,13,19,13,19,0,13,19,0,13,19,19,19,13,19,19,19,0,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,2],3],[[4,2],3],[[5,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[1,-1,[6,[8,[7]],[8,[9]],[8,[10]],[8,[11]],[8,[12]]]],0,[1,[[14,[10,13]]]],[1,[[14,[12,13]]]],[1,[[14,[9,13]]]],[1,[[14,[11,13]]]],[1,[[14,[7,13]]]],[4,[[15,[-1]]],[6,[8,[7]],[8,[9]],[8,[10]],[8,[11]],[8,[12]]]],[4,[[14,[[15,[10]],13]]]],[4,[[14,[[15,[12]],13]]]],[5,[[14,[[15,[[15,[12]]]],13]]]],[4,[[14,[[15,[9]],13]]]],[4,[[14,[[15,[11]],13]]]],[4,[[14,[[15,[7]],13]]]],[5,[[15,[[15,[-1]]]]],[6,[8,[7]],[8,[9]],[8,[10]],[8,[11]],[8,[12]]]],[5,[[14,[[15,[[15,[10]]]],13]]]],[5,[[14,[[15,[[15,[9]]]],13]]]],[5,[[14,[[15,[[15,[11]]]],13]]]],[5,[[14,[[15,[[15,[7]]]],13]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[[],1],[[],1],[[],1],[1,1],[[1,10,10],1],[[1,16],[[14,[4,13]]]],[[1,16,10,10],4],[[1,16,16],[[14,[5,13]]]],[[1,16,16,10,10],[[14,[5,13]]]],0,0,0,[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[13,2],3],[[[19,[-1]],2],3,20],[-1,-1,[]],[-1,-2,[],[]],[[21,-1],[[14,[-2,[19,[17]]]]],[[22,[17]]],[]],[-1,17,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,18,[]],0,0,[[],11],[[],[[23,[11]]]],[[[23,[11]]],24],[[10,10,10],10],[[],12],[[12,12],12],[7,11],[[11,11],11],[[],10],[16,[[14,[[15,[10]],13]]]],[16,[[14,[[15,[10]],13]]]],[16,[[14,[[15,[12]],13]]]],[[16,12,12],[[14,[[15,[12]],13]]]],[16,[[14,[[15,[9]],13]]]],[16,[[14,[[15,[11]],13]]]],[16,[[14,[[15,[7]],13]]]],[[16,16],[[14,[[15,[[15,[10]]]],13]]]],[[16,16],[[14,[[15,[[15,[10]]]],13]]]],[[16,16],[[14,[[15,[[15,[12]]]],13]]]],[[16,16,12,12],[[14,[[15,[[15,[12]]]],13]]]],[[16,16],[[14,[[15,[[15,[9]]]],13]]]],[[16,16],[[14,[[15,[[15,[11]]]],13]]]],[[16,16],[[14,[[15,[[15,[7]]]],13]]]],[11,24],[[],11],[[[23,[11]]],24],[[],10],[[],11],[[[25,[-1]]],17,26],[[[25,[[15,[-1]]]]],17,26]],"c":[],"p":[[4,"Rnum",0],[3,"Formatter",136],[6,"Result",136],[4,"Rv",0],[4,"Rvv",0],[8,"Clone",137],[15,"u8"],[8,"From",138],[15,"u16"],[15,"f64"],[15,"u64"],[15,"i64"],[6,"Re",83],[4,"Result",139],[3,"Vec",140],[15,"usize"],[3,"String",141],[3,"TypeId",142],[4,"RanError",83],[8,"Debug",136],[15,"str"],[8,"Into",138],[15,"array"],[15,"tuple"],[15,"slice"],[8,"Display",136]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
